// Generated by gencpp from file gqcnn/Observation.msg
// DO NOT EDIT!


#ifndef GQCNN_MESSAGE_OBSERVATION_H
#define GQCNN_MESSAGE_OBSERVATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gqcnn
{
template <class ContainerAllocator>
struct Observation_
{
  typedef Observation_<ContainerAllocator> Type;

  Observation_()
    : width(0)
    , height(0)
    , image_data()  {
    }
  Observation_(const ContainerAllocator& _alloc)
    : width(0)
    , height(0)
    , image_data(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _width_type;
  _width_type width;

   typedef uint32_t _height_type;
  _height_type height;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _image_data_type;
  _image_data_type image_data;





  typedef boost::shared_ptr< ::gqcnn::Observation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gqcnn::Observation_<ContainerAllocator> const> ConstPtr;

}; // struct Observation_

typedef ::gqcnn::Observation_<std::allocator<void> > Observation;

typedef boost::shared_ptr< ::gqcnn::Observation > ObservationPtr;
typedef boost::shared_ptr< ::gqcnn::Observation const> ObservationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gqcnn::Observation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gqcnn::Observation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gqcnn::Observation_<ContainerAllocator1> & lhs, const ::gqcnn::Observation_<ContainerAllocator2> & rhs)
{
  return lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.image_data == rhs.image_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gqcnn::Observation_<ContainerAllocator1> & lhs, const ::gqcnn::Observation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gqcnn

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gqcnn::Observation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gqcnn::Observation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gqcnn::Observation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gqcnn::Observation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gqcnn::Observation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gqcnn::Observation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gqcnn::Observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0c65489c2c2d2e14daf0f0525a5d2a78";
  }

  static const char* value(const ::gqcnn::Observation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0c65489c2c2d2e14ULL;
  static const uint64_t static_value2 = 0xdaf0f0525a5d2a78ULL;
};

template<class ContainerAllocator>
struct DataType< ::gqcnn::Observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gqcnn/Observation";
  }

  static const char* value(const ::gqcnn::Observation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gqcnn::Observation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Copyright Â©2017. The Regents of the University of California (Regents).\n"
"# All Rights Reserved. Permission to use, copy, modify, and distribute this\n"
"# software and its documentation for educational, research, and not-for-profit\n"
"# purposes, without fee and without a signed licensing agreement, is hereby\n"
"# granted, provided that the above copyright notice, this paragraph and the\n"
"# following two paragraphs appear in all copies, modifications, and\n"
"# distributions. Contact The Office of Technology Licensing, UC Berkeley, 2150\n"
"# Shattuck Avenue, Suite 510, Berkeley, CA 94720-1620, (510) 643-7201,\n"
"# otl@berkeley.edu,\n"
"# http://ipira.berkeley.edu/industry-info for commercial licensing opportunities.\n"
"\n"
"# IN NO EVENT SHALL REGENTS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT, SPECIAL,\n"
"# INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS, ARISING OUT OF\n"
"# THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF REGENTS HAS BEEN\n"
"# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
"\n"
"# REGENTS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n"
"# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n"
"# PURPOSE. THE SOFTWARE AND ACCOMPANYING DOCUMENTATION, IF ANY, PROVIDED\n"
"# HEREUNDER IS PROVIDED \"AS IS\". REGENTS HAS NO OBLIGATION TO PROVIDE\n"
"# MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.\n"
"\n"
"uint32 width\n"
"uint32 height\n"
"float32[] image_data\n"
;
  }

  static const char* value(const ::gqcnn::Observation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gqcnn::Observation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.image_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Observation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gqcnn::Observation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gqcnn::Observation_<ContainerAllocator>& v)
  {
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "image_data[]" << std::endl;
    for (size_t i = 0; i < v.image_data.size(); ++i)
    {
      s << indent << "  image_data[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.image_data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GQCNN_MESSAGE_OBSERVATION_H
